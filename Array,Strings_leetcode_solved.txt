// remove duplicate elements at most 2
    int removeDuplicates(vector<int>& nums) {
int i =0;
        // int ele= nums[0];
        for(auto ele : nums)
        {
            if(i==0 || i==1 || nums[i-2] != ele)
            {
                nums[i] = ele;
                i++;
            }
        }
    return i ;
       
        
       
    }


// majority element

    int majorityElement(vector<int>& nums) {

        map<int,int> m;
        //vector<int> ans;
        if(nums.size()==1){
            return nums[0];
        }
        for(int i=0;i<nums.size();i++){
            m[nums[i]]+=1;
            //ans.push_back(m[nums[i]]);

            if(m[nums[i]]>=(nums.size()/2+1) && nums.size()%2!=0){
                return nums[i];
            }
            
            if(m[nums[i]]>=(nums.size()/2) && nums.size()%2==0){
                return nums[i];
            }

        }

// rotate the array

void rotate(vector<int>& nums, int k) {
          k=k%nums.size();
        reverse(nums.begin(),nums.begin()+(nums.size()-k));

        reverse(nums.begin()+(nums.size()-k),nums.end());
    
        reverse(nums.begin(),nums.end());



    }

return 0;

3,2,1,4,5
3,2,1,5,4
4,5,1,2,3


// buy and sell stock
  int maxProfit(vector<int>& prices) {
         int min_price = prices[0];
        int maxprof = 0;

        for(int i=1;i<prices.size();i++){
            maxprof = max(maxprof,prices[i]-min_price);
            min_price = min(prices[i],min_price);
        }

        return maxprof;


    }


        
    }

// buy and sell stock II
 int maxProfit(vector<int>& prices) {

        int total_profit=0;
        int buy=prices[0];

        for(int i=1;i<prices.size();i++){
            if(buy>prices[i]){
                buy=prices[i];
            }

            else{
                total_profit+=prices[i]-buy;
                buy=prices[i];
            }
        }
        return total_profit;
    }
// Jump Game 1 (GREEDY) , here we calculate the highest jump=reachable , reachable is comapred everytime with the next array element's max jump, just run the code u will get it
  int reachable=0;
        for(int i=0;i<nums.size();i++){
            if(reachable<i){
                return false;
            }
            else{
                reachable=max(reachable,i+nums[i]);
            }
        }
        return true;
    }
// Jump Game 2 (GREEDY) // find the coverage which is window covering all the values that it can coverage
// when this coverge crosses or when this window covers the lastindex return the jump, here everytime we update the or insert a new cover we increment the jump so basically each cover indicates a jump.

int jump(vector<int>& nums) {
        int coverage=0;
        int lastindex=0;
        int jumps=0;

        if(nums.size()==1) return 0;

        for(int i=0;i<nums.size();i++){
          coverage=max(coverage,i+nums[i]);
            if(i==lastindex){
                lastindex=coverage;
                jumps++;
                
                 if(coverage>=nums.size()-1){
                return jumps;

            }

            }

           
        }
        return jumps;
    }
// H-index
  int hIndex(vector<int>& citations) {
         int n = citations.size();
        int low=0,high=n,mid;
        int res;
        sort(citations.begin(),citations.end());
        
        while(low<=high)
        {
            mid = low+(high-low)/2;
            int ub = lower_bound(citations.begin(),citations.end(),mid) - citations.begin();
            
            if(n-ub >= mid)
            {
                res = mid;
                low = mid+1;
            }
            else
                high = mid-1;
        }
        return res;
    }
// array product except itself element
vector<int> productExceptSelf(vector<int>& nums) {
 int n = nums.size();
        vector<int> ans(n);
        vector<int> left_Product(n);
        vector<int> right_Product(n);
        left_Product[0] = 1;
        for(int i=1; i<n; i++){
            left_Product[i] = left_Product[i-1] * nums[i-1];
        }
        right_Product[n-1] = 1;
        for(int i=n-2; i>=0; i--){
            right_Product[i] = right_Product[i+1] * nums[i+1];
        }
        for(int i=0; i<n; i++){
            ans[i] = left_Product[i] * right_Product[i];
        }
        return ans;
    }
// reverse a string 
 string reverseWords(string s) {
        string ans="";
        int l=s.length();
       
        while(s[l-1]==' '){
            l--;
        }
        int m=0;
        while(s[m]==' '){
            m++;
        }
        
        for(int i=l-1;i>=m;i--){
        
          string a="";
          while(s[i]!=' '){
             a+=s[i];
             i--;
          }
          reverse(a.begin(),a.end());
          ans+=a;
          ans+=' ';
// Integer to roman
string intToRoman(int num) {
        string ones[] = {"","I","II","III","IV","V","VI","VII","VIII","IX"};
        string tens[] = {"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"};
        string hrns[] = {"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
        string ths[]={"","M","MM","MMM"};
        
        return ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];
    }



        }

         return ans;
    }
// length of the last word
int lengthOfLastWord(string s) {
      int n=s.length();
      int l=0;
      for(int i=n-1;i>=0;i--){
        if(s[i]!=' '){
          l++;
        }
        else if(l>0 && s[i]==' '){
          break;
        }
         
      }
        return l;
    }
// first occurence (haystack and needle)
 int strStr(string haystack, string needle) {
        int l=needle.length();
        int n=haystack.length();

        for(int i=0;i<n;i++){
            if(haystack.substr(i,l)==needle){
                return i;
            }
        }

        return -1;
    }
// longest common prefix
 string longestCommonPrefix(vector<string>& strs) {
         sort(strs.begin(), strs.end());
       
        string one=strs[0];
        string two=strs[strs.size()-1];
        string ans="";
     
        for(int i=0;i<min(one.length(),two.length());i++){
            if(one[i]!=two[i]){
                break;
                //return req;
            }
            else {
            ans+=one[i];
            }
            
        }

      return ans;
        
    }
// can complete circuit
 int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
    
    for(int i=0;i<gas.size();i++){
      int l=0;
      int rem_gas=gas[i];
      if((rem_gas-cost[i])<=0){
        continue;
      }
      int j;
      if(i>=gas.size()-1){
        j=0;
      }
else if(i<gas.size()-1){ j=i;
j++;
}

while(rem_gas>0 && l<=gas.size()){
  
      rem_gas=rem_gas+gas[j]-cost[j];
      
      l++;
      if(rem_gas>0 && j>=gas.size()-1){
        j=0;
      }
      
}
if(l==gas.size()){
  return i;
}
    }
     return -1;
    }

//  bool isPalindrome(string s) {
        
        int l=s.length();
        if(l==0 || l==1){
            return true;
        }
       string x="";
        for(int i=0;i<s.length();i++){
            if((int(s[i])>64 && int(s[i]) <91)||
            (int(s[i]) <=122 && int(s[i]) >=97)||(
                int(s[i])>=48 && int(s[i])<=57)
            ){
              x+=tolower(s[i]);
          }
        }

        string y=x;

        reverse(y.begin(),y.end());

        if(x==y){
            return true;
        }
        
         else return false;
        
    }
